// // SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

// import "@forge-std/Test.sol";
// import "../src/Contest.sol";

// contract ContestTest is Test {
//     Contest public contest;
//     Contest public anyoneCanSubmitContest;
//     uint64 public constant CONTEST_START = 1681650000;
//     uint64 public constant VOTING_DELAY = 10000;
//     uint64 public constant VOTING_PERIOD = 10000;
//     uint64 public constant NUM_ALLOWED_PROPOSAL_SUBMISSIONS = 3;
//     uint64 public constant MAX_PROPOSAL_COUNT = 100;
//     uint64 public constant DOWNVOTING_ALLOWED = 0;
//     uint256[] public numParams = [
//         CONTEST_START,
//         VOTING_DELAY,
//         VOTING_PERIOD,
//         NUM_ALLOWED_PROPOSAL_SUBMISSIONS,
//         MAX_PROPOSAL_COUNT,
//         DOWNVOTING_ALLOWED
//     ];

//     /*
//         Voting merkle tree:
//         {
//             "decimals": 18,
//             "airdrop": {
//                 "0xd698e31229aB86334924ed9DFfd096a71C686900": 10,
//                 "0x5b45e296C06ab3dAD836BCBc0fBd7a4b75b83C02": 100
//             }
//         }

//         Submission merkle tree (both are value 10 because that's just the dummy value
//         that we make proposal merkle trees have and check against for a simpler flow):
//         {
//             "decimals": 18,
//             "airdrop": {
//                 "0xd698e31229aB86334924ed9DFfd096a71C686900": 10,
//                 "0x5b45e296C06ab3dAD836BCBc0fBd7a4b75b83C02": 10
//             }
//         }
//     */
//     bytes32 public constant VOTING_MERKLE_ROOT =
//         bytes32(0xdb0fd5147843d56c8f32dd8b2ab5bfe04c1fe199d121790ff805fb0f0f7019c5);
//     bytes32 public constant SUBMISSION_MERKLE_ROOT =
//         bytes32(0x7665f9790e783f13b614dacf6e7624e755b188e1bb086d301855d73f9b81fa85);
//     bytes32 public constant SUB_ZERO_MERKLE_ROOT =
//         bytes32(0x0000000000000000000000000000000000000000000000000000000000000000);
//     address public constant CREATOR_ADDRESS_1 = 0xc109636a2b47f8b290cc134dd446Fcd7d7e0cC94;
//     address public constant PERMISSIONED_ADDRESS_1 = 0xd698e31229aB86334924ed9DFfd096a71C686900;
//     address public constant PERMISSIONED_ADDRESS_2 = 0x5b45e296C06ab3dAD836BCBc0fBd7a4b75b83C02;
//     address public constant UNPERMISSIONED_ADDRESS_1 = 0x016C8780e5ccB32E5CAA342a926794cE64d9C364;
//     bytes32[] public proof0 = [bytes32(0x0000000000000000000000000000000000000000000000000000000000000000)];
//     bytes32[] public votingProof1 = [bytes32(0xf712e9f1bed1665ca7b426db8e09d438375a76fc5cf8052b6abae75233a117e7)];
//     bytes32[] public votingProof2 = [bytes32(0x3704b461c09457df5491016097977d5364e607b59049ca6d36dfb9c16d03a2bf)];
//     bytes32[] public submissionProof1 = [bytes32(0x3525e2aa1b921658191cfccf7e63bf6bcac64a0315ca9eb04f2bcc08975d431f)];
//     bytes32[] public submissionProof2 = [bytes32(0x3704b461c09457df5491016097977d5364e607b59049ca6d36dfb9c16d03a2bf)];

//     address[] public safeSigners = [address(0)];
//     uint8 public constant SAFE_THRESHOLD = 1;

//     uint256[] public proposalsToDelete;

//     IGovernor.ProposalCore public firstProposalPA1 = IGovernor.ProposalCore({
//         author: PERMISSIONED_ADDRESS_1,
//         description: "firstProposalPA1",
//         exists: true,
//         targetMetadata: IGovernor.TargetMetadata({targetAddress: PERMISSIONED_ADDRESS_1}),
//         safeMetadata: IGovernor.SafeMetadata({signers: safeSigners, threshold: SAFE_THRESHOLD})
//     });
//     IGovernor.ProposalCore public secondProposalPA1 = IGovernor.ProposalCore({
//         author: PERMISSIONED_ADDRESS_1,
//         description: "secondProposalPA1",
//         exists: true,
//         targetMetadata: IGovernor.TargetMetadata({targetAddress: PERMISSIONED_ADDRESS_2}),
//         safeMetadata: IGovernor.SafeMetadata({signers: safeSigners, threshold: SAFE_THRESHOLD})
//     });
//     IGovernor.ProposalCore public firstProposalPA2 = IGovernor.ProposalCore({
//         author: PERMISSIONED_ADDRESS_2,
//         description: "firstProposalPA2",
//         exists: true,
//         targetMetadata: IGovernor.TargetMetadata({targetAddress: PERMISSIONED_ADDRESS_2}),
//         safeMetadata: IGovernor.SafeMetadata({signers: safeSigners, threshold: SAFE_THRESHOLD})
//     });
//     IGovernor.ProposalCore public unpermissionedAuthorProposal1 = IGovernor.ProposalCore({
//         author: UNPERMISSIONED_ADDRESS_1,
//         description: "unpermissionedAuthorProposal1",
//         exists: true,
//         targetMetadata: IGovernor.TargetMetadata({targetAddress: PERMISSIONED_ADDRESS_1}),
//         safeMetadata: IGovernor.SafeMetadata({signers: safeSigners, threshold: SAFE_THRESHOLD})
//     });

//     uint256 proposalId;

//     /////////////////////////////

//     // SETUP

//     function setUp() public {
//         vm.startPrank(CREATOR_ADDRESS_1);

//         contest = new Contest("test",
//                               "hello world",
//                               SUBMISSION_MERKLE_ROOT,
//                               VOTING_MERKLE_ROOT,
//                               numParams);

//         vm.stopPrank();

//         // PROPOSE

//         vm.warp(1681650001);
//         vm.prank(PERMISSIONED_ADDRESS_1);
//         proposalId = contest.propose(firstProposalPA1, submissionProof1);

//         // VOTE
//         vm.startPrank(PERMISSIONED_ADDRESS_1);
//         vm.warp(1681660001);
//         contest.castVote(proposalId, 0, 10 ether, 1 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 2 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 3 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 4 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 5 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 6 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 7 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 8 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 9 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 10 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 11 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 12 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 13 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 14 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 15 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 16 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 17 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 18 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 19 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 20 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 21 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 22 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 23 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 24 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 25 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 26 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 27 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 28 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 29 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 30 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 31 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 32 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 33 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 34 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 35 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 36 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 37 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 38 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 39 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 40 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 41 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 42 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 43 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 44 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 45 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 46 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 47 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 48 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 49 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 50 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 51 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 52 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 53 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 54 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 55 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 56 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 57 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 58 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 59 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 60 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 61 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 62 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 63 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 64 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 65 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 66 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 67 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 68 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 69 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 70 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 71 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 72 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 73 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 74 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 75 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 76 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 77 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 78 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 79 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 80 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 81 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 82 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 83 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 84 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 85 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 86 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 87 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 88 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 89 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 90 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 91 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 92 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 93 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 94 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 95 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 96 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 97 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 98 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 99 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 100 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 101 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 102 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 103 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 104 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 105 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 106 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 107 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 108 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 109 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 110 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 111 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 112 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 113 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 114 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 115 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 116 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 117 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 118 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 119 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 120 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 121 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 122 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 123 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 124 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 125 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 126 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 127 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 128 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 129 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 130 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 131 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 132 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 133 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 134 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 135 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 136 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 137 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 138 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 139 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 140 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 141 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 142 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 143 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 144 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 145 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 146 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 147 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 148 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 149 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 150 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 151 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 152 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 153 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 154 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 155 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 156 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 157 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 158 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 159 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 160 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 161 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 162 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 163 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 164 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 165 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 166 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 167 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 168 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 169 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 170 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 171 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 172 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 173 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 174 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 175 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 176 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 177 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 178 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 179 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 180 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 181 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 182 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 183 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 184 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 185 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 186 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 187 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 188 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 189 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 190 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 191 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 192 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 193 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 194 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 195 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 196 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 197 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 198 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 199 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 200 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 201 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 202 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 203 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 204 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 205 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 206 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 207 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 208 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 209 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 210 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 211 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 212 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 213 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 214 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 215 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 216 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 217 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 218 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 219 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 220 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 221 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 222 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 223 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 224 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 225 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 226 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 227 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 228 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 229 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 230 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 231 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 232 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 233 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 234 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 235 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 236 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 237 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 238 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 239 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 240 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 241 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 242 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 243 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 244 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 245 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 246 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 247 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 248 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 249 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 250 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 251 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 252 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 253 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 254 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 255 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 256 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 257 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 258 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 259 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 260 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 261 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 262 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 263 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 264 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 265 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 266 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 267 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 268 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 269 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 270 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 271 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 272 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 273 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 274 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 275 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 276 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 277 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 278 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 279 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 280 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 281 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 282 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 283 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 284 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 285 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 286 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 287 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 288 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 289 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 290 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 291 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 292 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 293 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 294 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 295 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 296 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 297 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 298 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 299 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 300 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 301 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 302 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 303 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 304 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 305 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 306 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 307 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 308 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 309 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 310 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 311 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 312 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 313 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 314 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 315 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 316 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 317 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 318 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 319 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 320 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 321 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 322 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 323 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 324 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 325 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 326 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 327 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 328 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 329 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 330 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 331 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 332 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 333 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 334 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 335 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 336 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 337 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 338 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 339 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 340 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 341 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 342 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 343 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 344 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 345 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 346 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 347 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 348 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 349 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 350 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 351 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 352 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 353 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 354 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 355 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 356 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 357 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 358 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 359 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 360 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 361 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 362 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 363 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 364 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 365 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 366 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 367 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 368 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 369 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 370 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 371 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 372 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 373 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 374 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 375 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 376 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 377 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 378 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 379 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 380 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 381 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 382 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 383 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 384 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 385 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 386 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 387 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 388 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 389 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 390 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 391 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 392 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 393 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 394 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 395 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 396 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 397 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 398 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 399 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 400 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 401 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 402 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 403 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 404 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 405 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 406 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 407 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 408 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 409 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 410 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 411 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 412 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 413 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 414 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 415 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 416 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 417 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 418 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 419 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 420 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 421 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 422 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 423 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 424 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 425 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 426 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 427 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 428 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 429 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 430 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 431 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 432 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 433 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 434 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 435 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 436 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 437 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 438 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 439 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 440 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 441 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 442 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 443 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 444 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 445 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 446 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 447 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 448 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 449 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 450 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 451 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 452 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 453 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 454 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 455 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 456 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 457 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 458 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 459 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 460 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 461 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 462 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 463 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 464 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 465 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 466 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 467 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 468 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 469 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 470 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 471 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 472 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 473 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 474 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 475 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 476 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 477 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 478 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 479 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 480 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 481 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 482 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 483 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 484 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 485 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 486 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 487 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 488 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 489 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 490 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 491 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 492 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 493 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 494 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 495 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 496 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 497 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 498 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 499 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 500 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 501 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 502 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 503 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 504 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 505 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 506 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 507 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 508 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 509 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 510 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 511 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 512 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 513 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 514 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 515 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 516 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 517 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 518 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 519 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 520 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 521 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 522 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 523 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 524 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 525 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 526 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 527 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 528 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 529 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 530 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 531 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 532 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 533 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 534 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 535 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 536 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 537 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 538 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 539 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 540 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 541 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 542 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 543 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 544 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 545 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 546 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 547 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 548 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 549 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 550 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 551 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 552 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 553 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 554 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 555 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 556 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 557 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 558 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 559 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 560 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 561 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 562 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 563 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 564 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 565 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 566 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 567 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 568 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 569 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 570 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 571 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 572 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 573 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 574 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 575 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 576 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 577 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 578 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 579 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 580 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 581 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 582 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 583 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 584 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 585 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 586 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 587 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 588 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 589 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 590 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 591 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 592 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 593 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 594 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 595 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 596 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 597 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 598 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 599 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 600 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 601 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 602 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 603 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 604 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 605 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 606 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 607 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 608 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 609 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 610 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 611 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 612 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 613 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 614 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 615 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 616 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 617 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 618 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 619 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 620 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 621 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 622 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 623 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 624 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 625 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 626 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 627 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 628 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 629 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 630 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 631 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 632 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 633 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 634 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 635 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 636 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 637 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 638 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 639 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 640 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 641 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 642 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 643 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 644 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 645 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 646 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 647 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 648 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 649 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 650 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 651 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 652 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 653 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 654 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 655 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 656 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 657 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 658 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 659 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 660 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 661 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 662 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 663 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 664 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 665 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 666 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 667 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 668 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 669 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 670 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 671 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 672 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 673 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 674 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 675 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 676 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 677 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 678 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 679 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 680 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 681 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 682 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 683 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 684 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 685 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 686 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 687 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 688 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 689 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 690 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 691 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 692 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 693 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 694 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 695 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 696 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 697 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 698 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 699 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 700 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 701 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 702 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 703 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 704 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 705 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 706 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 707 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 708 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 709 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 710 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 711 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 712 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 713 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 714 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 715 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 716 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 717 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 718 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 719 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 720 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 721 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 722 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 723 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 724 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 725 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 726 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 727 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 728 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 729 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 730 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 731 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 732 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 733 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 734 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 735 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 736 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 737 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 738 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 739 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 740 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 741 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 742 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 743 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 744 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 745 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 746 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 747 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 748 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 749 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 750 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 751 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 752 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 753 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 754 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 755 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 756 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 757 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 758 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 759 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 760 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 761 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 762 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 763 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 764 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 765 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 766 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 767 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 768 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 769 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 770 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 771 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 772 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 773 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 774 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 775 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 776 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 777 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 778 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 779 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 780 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 781 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 782 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 783 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 784 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 785 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 786 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 787 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 788 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 789 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 790 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 791 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 792 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 793 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 794 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 795 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 796 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 797 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 798 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 799 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 800 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 801 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 802 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 803 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 804 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 805 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 806 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 807 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 808 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 809 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 810 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 811 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 812 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 813 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 814 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 815 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 816 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 817 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 818 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 819 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 820 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 821 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 822 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 823 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 824 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 825 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 826 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 827 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 828 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 829 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 830 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 831 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 832 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 833 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 834 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 835 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 836 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 837 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 838 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 839 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 840 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 841 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 842 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 843 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 844 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 845 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 846 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 847 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 848 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 849 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 850 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 851 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 852 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 853 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 854 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 855 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 856 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 857 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 858 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 859 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 860 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 861 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 862 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 863 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 864 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 865 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 866 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 867 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 868 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 869 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 870 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 871 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 872 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 873 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 874 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 875 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 876 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 877 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 878 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 879 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 880 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 881 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 882 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 883 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 884 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 885 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 886 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 887 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 888 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 889 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 890 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 891 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 892 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 893 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 894 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 895 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 896 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 897 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 898 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 899 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 900 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 901 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 902 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 903 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 904 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 905 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 906 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 907 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 908 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 909 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 910 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 911 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 912 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 913 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 914 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 915 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 916 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 917 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 918 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 919 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 920 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 921 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 922 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 923 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 924 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 925 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 926 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 927 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 928 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 929 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 930 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 931 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 932 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 933 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 934 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 935 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 936 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 937 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 938 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 939 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 940 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 941 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 942 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 943 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 944 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 945 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 946 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 947 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 948 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 949 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 950 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 951 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 952 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 953 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 954 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 955 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 956 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 957 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 958 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 959 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 960 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 961 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 962 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 963 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 964 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 965 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 966 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 967 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 968 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 969 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 970 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 971 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 972 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 973 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 974 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 975 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 976 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 977 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 978 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 979 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 980 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 981 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 982 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 983 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 984 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 985 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 986 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 987 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 988 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 989 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 990 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 991 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 992 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 993 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 994 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 995 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 996 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 997 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 998 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 999 wei, votingProof1);
//         contest.castVote(proposalId, 0, 10 ether, 1000 wei, votingProof1);

//         vm.stopPrank();
//     }

//     function testThisBoi() public {
//         vm.warp(1681660001);
//         vm.prank(PERMISSIONED_ADDRESS_1);
//         contest.castVote(proposalId, 0, 10 ether, 1001 wei, votingProof1);
//     }

//     /////////////////////////////
// }
